(function() {
	/*BRUTALLY STRIPPED FROM NODE.JS "path" module, www.nodejs.org*/
	function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last == '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}
	  function normalize(path) {
    var isAbsolute = path.charAt(0) === '/',
        trailingSlash = path.slice(-1) === '/';

    // Normalize the path
    path = normalizeArray(path.split('/').filter(function(p) {
      return !!p;
    }), !isAbsolute).join('/');

    if (!path && !isAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isAbsolute ? '/' : '') + path;
  };


  	function join() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize(paths.filter(function(p, index) {
      return p && typeof p === 'string';
    }).join('/'));
  };

/*BRUTALLY STRIPPED FROM NODE.JS "util" module, www.nodejs.org*/
  function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = Object.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};
  /**/



	( function(){
		console.log('defining window.node2browser')
		var isNodeMod = function(name) {
			return name[0] != '.'
		}
    var initFile = '/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib/index.js'
		var startpath = '/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib'
    var requiredAs = 'scheem'
		var require = function(modulepath) {
			return function(reqmodpath) {
        if(reqmodpath==requiredAs) {return window.node2browser.require(initFile)}
				var reqmod = isNodeMod(reqmodpath) ? reqmodpath : join(modulepath,reqmodpath)
				var thecache = window.node2browser.cache

				if(undefined == thecache[reqmod]) {
					reqmod = reqmod+'.js'
					if(undefined == thecache[reqmod]) {
						throw new Error('Module "'+reqmodpath+'" not loaded')	
					}
				}

				return thecache[reqmod]
			}
		}
		window.node2browser = {
			makerequire: require,
			require: require(startpath),
			globals: {
				process: {
					nextTick: function(fn) {
						window.setTimeout(fn,1)
					},
          argv: []
				}
			},
			cache: {
				util: {
					inspect: function(o) {console.log(o)},
					inherits: function(c,s) {inherits(c,s)}
				}
			}
	}})();

(function(r) {
	var file = '/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib/tscheemparser.js'
	var exp = {}
	var mod = {
		exports: exp
	}
	console.log('defining module',file);
	(function(require,module,exports,process) {

/*---------------------------------------------------*/
module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "atom": parse_atom,
        "comment": parse_comment,
        "expression": parse_expression,
        "ident": parse_ident,
        "ids": parse_ids,
        "integer": parse_integer,
        "list": parse_list,
        "quote": parse_quote,
        "space": parse_space,
        "type": parse_type,
        "typeabs": parse_typeabs,
        "typed": parse_typed,
        "typeid": parse_typeid,
        "validchar": parse_validchar
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "expression";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var result6 = parse_space();
        while (result6 !== null) {
          result1.push(result6);
          var result6 = parse_space();
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var result4 = parse_comment();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result2 = " ";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[	\n\r]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[	\\n\\r]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === ";;") {
          var result1 = ";;";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\";;\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos).match(/^[\r\n]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[\\r\\n]");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            if (input.length > pos) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos).match(/^[\r\n]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[\\r\\n]");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_typed() {
        var cacheKey = 'typed@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result3 = "<";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_type();
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              var savedPos3 = pos;
              var result13 = parse__();
              if (result13 !== null) {
                var result14 = parse_type();
                if (result14 !== null) {
                  var result11 = [result13, result14];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
              var result12 = result11 !== null
                ? (function(t) {return t})(result11[1])
                : null;
              if (result12 !== null) {
                var result10 = result12;
              } else {
                var result10 = null;
                pos = savedPos2;
              }
              while (result10 !== null) {
                result6.push(result10);
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_type();
                  if (result14 !== null) {
                    var result11 = [result13, result14];
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
                var result12 = result11 !== null
                  ? (function(t) {return t})(result11[1])
                  : null;
                if (result12 !== null) {
                  var result10 = result12;
                } else {
                  var result10 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ">") {
                    var result8 = ">";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) { return [first].concat(rest); })(result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result12 = parse_typeabs();
          if (result12 !== null) {
            var result4 = result12;
          } else {
            var result11 = parse_type();
            if (result11 !== null) {
              var result4 = result11;
            } else {
              var result10 = parse_list();
              if (result10 !== null) {
                var result4 = result10;
              } else {
                var result9 = parse_atom();
                if (result9 !== null) {
                  var result4 = result9;
                } else {
                  var result8 = parse_quote();
                  if (result8 !== null) {
                    var result4 = result8;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            };
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result7 = parse_typed();
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e, t) { return t==='' ? e : ['tapp',e,t]; })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_typeabs() {
        var cacheKey = 'typeabs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result7 = parse_ids();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result16 = parse_type();
                        var result11 = result16 !== null ? result16 : '';
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            var result13 = parse_expression();
                            if (result13 !== null) {
                              var result14 = parse__();
                              if (result14 !== null) {
                                if (input.substr(pos, 1) === "}") {
                                  var result15 = "}";
                                  pos += 1;
                                } else {
                                  var result15 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"}\"");
                                  }
                                }
                                if (result15 !== null) {
                                  var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t, tbody, body) { return ['tabs',t,tbody,body]; })(result1[4], result1[8], result1[10])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type() {
        var cacheKey = 'type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos5 = pos;
        var savedPos6 = pos;
        if (input.substr(pos, 1) === "(") {
          var result25 = "(";
          pos += 1;
        } else {
          var result25 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result25 !== null) {
          var result26 = parse__();
          if (result26 !== null) {
            var result27 = parse_type();
            if (result27 !== null) {
              var result28 = parse__();
              if (result28 !== null) {
                if (input.substr(pos, 2) === "->") {
                  var result29 = "->";
                  pos += 2;
                } else {
                  var result29 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"->\"");
                  }
                }
                if (result29 !== null) {
                  var result30 = parse__();
                  if (result30 !== null) {
                    var result31 = parse_type();
                    if (result31 !== null) {
                      var result32 = parse__();
                      if (result32 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result33 = ")";
                          pos += 1;
                        } else {
                          var result33 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result33 !== null) {
                          var result23 = [result25, result26, result27, result28, result29, result30, result31, result32, result33];
                        } else {
                          var result23 = null;
                          pos = savedPos6;
                        }
                      } else {
                        var result23 = null;
                        pos = savedPos6;
                      }
                    } else {
                      var result23 = null;
                      pos = savedPos6;
                    }
                  } else {
                    var result23 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result23 = null;
                  pos = savedPos6;
                }
              } else {
                var result23 = null;
                pos = savedPos6;
              }
            } else {
              var result23 = null;
              pos = savedPos6;
            }
          } else {
            var result23 = null;
            pos = savedPos6;
          }
        } else {
          var result23 = null;
          pos = savedPos6;
        }
        var result24 = result23 !== null
          ? (function(left, right) { return {tag:'arrowtype', left:left, right:right}; })(result23[2], result23[6])
          : null;
        if (result24 !== null) {
          var result22 = result24;
        } else {
          var result22 = null;
          pos = savedPos5;
        }
        if (result22 !== null) {
          var result0 = result22;
        } else {
          var savedPos3 = pos;
          var savedPos4 = pos;
          if (input.substr(pos, 1) === "[") {
            var result17 = "[";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result17 !== null) {
            var result18 = parse__();
            if (result18 !== null) {
              var result19 = parse_type();
              if (result19 !== null) {
                var result20 = parse__();
                if (result20 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result21 = "]";
                    pos += 1;
                  } else {
                    var result21 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result21 !== null) {
                    var result15 = [result17, result18, result19, result20, result21];
                  } else {
                    var result15 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos4;
                }
              } else {
                var result15 = null;
                pos = savedPos4;
              }
            } else {
              var result15 = null;
              pos = savedPos4;
            }
          } else {
            var result15 = null;
            pos = savedPos4;
          }
          var result16 = result15 !== null
            ? (function(t) { return {tag:'listtype', type:t}; })(result15[2])
            : null;
          if (result16 !== null) {
            var result14 = result16;
          } else {
            var result14 = null;
            pos = savedPos3;
          }
          if (result14 !== null) {
            var result0 = result14;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 3) === "num") {
              var result13 = "num";
              pos += 3;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"num\"");
              }
            }
            if (result13 !== null) {
              var result8 = result13;
            } else {
              if (input.substr(pos, 4) === "bool") {
                var result12 = "bool";
                pos += 4;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"bool\"");
                }
              }
              if (result12 !== null) {
                var result8 = result12;
              } else {
                if (input.substr(pos, 4) === "unit") {
                  var result11 = "unit";
                  pos += 4;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"unit\"");
                  }
                }
                if (result11 !== null) {
                  var result8 = result11;
                } else {
                  if (input.substr(pos, 3) === "sym") {
                    var result10 = "sym";
                    pos += 3;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"sym\"");
                    }
                  }
                  if (result10 !== null) {
                    var result8 = result10;
                  } else {
                    var result8 = null;;
                  };
                };
              };
            }
            var result9 = result8 !== null
              ? (function(base) { return {tag:'basetype', name:base}; })(result8)
              : null;
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ":") {
                var result4 = ":";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\":\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse__();
                if (result5 !== null) {
                  var result6 = parse_typeid();
                  if (result6 !== null) {
                    var result2 = [result4, result5, result6];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(i) { return {tag:'identtype', name:i}; })(result2[2])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ids() {
        var cacheKey = 'ids@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ident();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result8 = parse__();
          if (result8 !== null) {
            var result9 = parse_ident();
            if (result9 !== null) {
              var result6 = [result8, result9];
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          var result7 = result6 !== null
            ? (function(i) {return i;})(result6[1])
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result8 = parse__();
            if (result8 !== null) {
              var result9 = parse_ident();
              if (result9 !== null) {
                var result6 = [result8, result9];
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
            var result7 = result6 !== null
              ? (function(i) {return i;})(result6[1])
              : null;
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) { return [first].concat(rest); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_typeid() {
        var cacheKey = 'typeid@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(chars) {return chars.join('');})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_atom() {
        var cacheKey = 'atom@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_integer();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_ident();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ident() {
        var cacheKey = 'ident@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_validchar();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_validchar();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(chars) { return chars.join(''); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_validchar() {
        var cacheKey = 'validchar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9a-zA-Z_?!+\-=@#$%^&|*\/.>]/) !== null) {
          var result9 = input.charAt(pos);
          pos++;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9a-zA-Z_?!+\\-=@#$%^&|*\\/.>]");
          }
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var savedPos3 = pos;
          var result7 = parse__();
          if (result7 !== null) {
            var result8 = parse_typed();
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "<") {
              var result5 = "<";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function() {return '<';})()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "-") {
          var result6 = "-";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        var result3 = result6 !== null ? result6 : '';
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(minus, digits) {
          	var num = parseInt(digits.join(""), 10);
          	return (minus==='-') ? (-num) : num;
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quote() {
        var cacheKey = 'quote@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_expression();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) { return ['quote',e]; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_list() {
        var cacheKey = 'list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_expression();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_expression();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result5 = ")";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(es) { return es.length > 0 ? es : []; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

/*---------------------------------------------------*/

	}
	)(r,mod,exp,window.node2browser.globals.process);

	window.node2browser.cache[file] = mod.exports
	console.log('defined',file,mod.exports)
	var idx = file.indexOf('/index.js')
	if(idx>0&&file.length==(idx+'/index.js'.length)) {
		window.node2browser.cache[file.substring(0,idx)] = mod.exports
	}
}(window.node2browser.makerequire('/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib')));


(function(r) {
	var file = '/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib/tscheem.js'
	var exp = {}
	var mod = {
		exports: exp
	}
	console.log('defining module',file);
	(function(require,module,exports,process) {

/*---------------------------------------------------*/
var util = require('util');

/*
UTILITY
*/
var base = function(name) {
	return {tag:'basetype', name:name};
};
var arrow = function(left,right) {
	return {tag:'arrowtype', left:left, right:right};
};
var list = function(type) {
	return {tag:'listtype', type:type};
};
var tIdent = function(name) {
	return {tag:'identtype', name:name};
};
var typeAbs = function() {
	var tFormal = Array.prototype.slice.call(arguments);
	var tBody = tFormal.pop();
	return ['tabs',tFormal,tBody,[]]; //empty expr
};
var numType = base('num');
var boolType = base('bool');
var unitType = base('unit');
var symType = base('sym');
/**/

var typeExprIf = function(expr, context) {
	var testType = typeExpr(expr[1], context);
	if(testType.name !== 'bool') {
		throw new Error('Wrong test type');
	}
	var A_type = typeExpr(expr[2], context);
	var B_type = typeExpr(expr[3], context);
	if(!(sameType(A_type,B_type))) {
		throw new Error('Not same type');
	}
	return A_type;
};
var typeExprLambdaOne = function(expr, context) {
	var newctx = {bindings:{}, outer:context};
	newctx.bindings[expr[1]] = expr[2];
	return arrow(expr[2], typeExpr(expr[3],newctx));
};
var typeExprQuote = function(expr, context) {
	//Quoting a number, bool or unit(?) its ok.
	//For other strings, there is the 'sym' type
	if(typeof expr === 'number') {return numType;}
	if(typeof expr === 'string') {
		if(expr==='#u') {return unitType;}
		if(expr==='#t'||expr==='#f') {return boolType;}
		return symType;
	}
	//It cannot be something different from an Array,
	//but hey
	if(!(expr instanceof Array)) {
		throw new Error('Wrong quote expression');
	}
	//Only heterogeneous lists
	var the = typeExprQuote(expr[0], context);
	for(var i=1;i<expr.length;i++) {
		var theI = typeExprQuote(expr[i], context);
		if(!sameType(the,theI)) {
			throw new Error('Heterogeneous lists not supported!');
		}
	}
	return list(the);
};
var typeExprDefine = function(expr, context) {
	if(expr.length===3) {
		add_binding(context, expr[1], typeExpr(expr[2],context));	
	} else if(expr.length===4) {
		add_binding(context, expr[1], expr[2]);
		sameType(expr[2], typeExpr(context, expr[3]));
	}
	return unitType;
};
var typeExprSet = function(expr, context) {
	if(!(sameType( typeExpr(expr[1],context), typeExpr(expr[2],context), context ))) {
		throw new Error('Not same type');
	}
	return unitType;
};
var typeExprBegin = function(expr, context) {
	var out;
	for(var i=1; i<expr.length; i++) {
		out = typeExpr(expr[i], context);
	}
	return out;
};
var typeExprTypeAbstration = function(expr, context) {
	var tFormal = expr[1];
	return function() {
		var typeArgs = Array.prototype.slice.call(arguments);
		var newctx = {bindings:{}, outer:context};
		if(tFormal.length !== typeArgs.length) {
			throw new Error('TypeArg mismatch');
		}
		for(var i=0; i<tFormal.length; i++) {
			newctx.bindings[tFormal[i]] = typeArgs[i];
		}
		if(expr[2]==='') {
			return typeSubst(typeExpr(expr[3],newctx),newctx);	
		}
		return typeSubst(expr[2],newctx);
	}
};
var typeExprTypeApplication = function(expr, context) {
	var e = expr[1];
	var t = expr[2];
	var tabs = typeExpr(e,context);
	if(!(tabs instanceof Function)) {
		if(tabs[0]==='tabs') {
			tabs = typeExpr(tabs,context);
		} else {
			throw new Error('Not a type-abstraction');
		}
	}
	var tActual = [];
	for(var i=0;i<t.length;i++) {
		tActual[i] = typeSubst(t[i], context);
	}
	return tabs.apply(null, tActual);
};
var ctr = 0;
var typeExprAppOne = function(expr, context) {
	var c = ctr++;
	var A = expr[0];
	var B = expr[1];
	var A_type = typeExpr(A,context);
	var B_type = typeExpr(B,context);
	if (A_type.tag !== 'arrowtype') {
		console.log('NOT AN ARROW TYPE',A_type);
		throw new Error('Not an arrow type');
	}
	var U_type = A_type.left;
	var V_type = A_type.right;
	if (!(sameType(U_type,B_type,context))) {
		console.log('NOTSAMETYPE',util.inspect(U_type,false,100),util.inspect(B_type,false,100));
		throw new Error('Argument type did not match');
	}
	return V_type;
};

var erase = function(expr) {
	if(typeof expr === 'number' || typeof expr === 'string') {return expr;}
	if(expr instanceof Array) {
		switch(expr[0]) {
			case 'if': return ['if',erase(expr[1]),erase(expr[2]),erase(expr[3])];
			case 'lambda-one': return ['lambda-one',expr[1],erase(expr[3])];
			case 'quote': return expr;
			case 'define':
				if(expr.length===3) {return ['define',expr[1],erase(expr[2])];}
				if(expr.length===4) {return ['define',expr[1],erase(expr[3])];}
			case 'set!': return ['set!',expr[1],erase(expr[2])];
			case 'begin':
				var out = ['begin'];
				for(var i=1;i<expr.length;i++) {
					out[i] = erase(expr[i]);
				}
				return out;
			case 'tabs':
				return erase(expr[3]);
			case 'tapp':
				return erase(expr[1]);
			default: return [erase(expr[0]),erase(expr[1])];
		}
	} else {
		if(expr.tag==='tabs') {return erase(expr[3]);}
	};

	console.log('ERASEERR',util.inspect(expr,false,100));
	throw new Error('Cannot erase typeinfo from ' + expr);
};

var eval = function(expr, ctx) {
	if(typeof expr==='number') {return expr;}
	if(typeof expr==='string') {
		if(expr==='#t' || expr==='#f' || expr==='#u') {return expr;}
		return lookup(ctx, expr);
	}
	switch(expr[0]) {
		case 'if':
			return (eval(expr[1],ctx)) ? (eval(expr[2],ctx)) : (eval(expr[3],ctx));
		case 'lambda-one':
			return function(arg) {
				return eval(expr[2], bind(ctx, expr[1], arg));
			};
		case 'quote': return expr[1];
		case 'define': add_binding(ctx, expr[1], eval(expr[2],ctx)); return null;
		case 'set!': update(ctx, expr[1], eval(expr[2],ctx)); return null;
		case 'begin':
			var out;
			for(var i=1; i<expr.length; i++) {
				out = eval(expr[i],ctx);
			}
			return out;
		default:
			var fn = eval(expr[0],ctx);
			var arg = eval(expr[1],ctx);
			return fn(arg);
	}

};

var typeExpr = function(expr, context) {
	if(typeof expr === 'number') {
		return numType;
	}
	if(typeof expr === 'string') {
		if(expr==='#u') {
			return unitType;
		}
		if(expr==='#t' || expr==='#f') {
			return boolType;
		}
		return lookup(context, expr);
	}
	if(!(expr instanceof Array)) {
		console.log('wrong expr',expr);
		throw new Error('What expression are you?');
	}
	switch(expr[0]) {
		case 'if': return typeExprIf(expr,context);
		case 'lambda-one': return typeExprLambdaOne(expr,context);
		case 'quote': return typeExprQuote(expr[1],context);
		case 'define': return typeExprDefine(expr,context);
		case 'set!': return typeExprSet(expr,context);
		case 'begin': return typeExprBegin(expr,context);
		case 'tabs': return typeExprTypeAbstration(expr,context);
		case 'tapp': return typeExprTypeApplication(expr,context);
		default: return typeExprAppOne(expr,context)
	};
};

var typeSubst = function(body,context) {
	switch(body.tag) {
		case 'basetype': return body;
		case 'identtype': return typeSubst(lookup(context,body.name),context);
		case 'listtype':
			return list(typeSubst(body.type,context));
		case 'arrowtype':
			return arrow( typeSubst(body.left,context), typeSubst(body.right,context) );
		default:
			throw new Error('what type? '+body);
	}
};
var sameType = function(sa,sb,context) {
	var _sameType = function(a,b) {
		if(a instanceof Function || b instanceof Function) {throw new Error('cannot check equality of type abstraction');}
		if(a.tag !== b.tag) {return false;}
		if(a.tag==='basetype') {return a.name===b.name;}
		if(a.tag==='listtype') {return _sameType(a.type,b.type);}
		if(a.tag==='arrowtype') {return _sameType(a.left,b.left) && _sameType(a.right,b.right);}
		if(a.tag==='identtype') {throw new Error('Can check for equality only after typeSubst!');}
	};
	return _sameType(typeSubst(sa,context),typeSubst(sb,context));
};

var lookup = function(env,v) {
    if(env===undefined||env===null||env.bindings===undefined) {
        throw new Error('Value '+v+' not found');
    }
    if(env.bindings[v]!==undefined) {return env.bindings[v];}
    return lookup(env.outer,v);
};
var update = function(env,v,val) {
    if(env===undefined||env===null||env.bindings===undefined) {
        throw new Error('Cannot update non existent value '+v);
    }
    if(env.bindings[v]!==undefined) {
        env.bindings[v]=val;
    } else {
        update(env.outer,v,val);
    }
};
var add_binding = function(env,v,val) {
    env.bindings[v] = val;
    return env;
};
var bind = function(env,v,val) {
    var newBindings = {};
    newBindings[v] = val;
    return {bindings:newBindings, outer:env};
};

var stdlib = function() {
    var EnvBuilder = function() {
        var _env = { bindings:{}, outer:{} };
        var _types = { bindings:{}, outer:{} };
        var s = this;
        this.add = function(k,type,v) {
            _env.bindings[k] = v;
            _types.bindings[k] = type;
            return s;
        };
        this.env = function() {
            return _env;
        };
        this.types = function() {
            return _types;
        };
    };
    var pair = function(fn) {
        return function(x) {
            return function(y) {
                return fn(x,y);
            }
        }
    }
    var eq = function(x,y) {
        if(x instanceof Array) {
            return (y instanceof Array) && listEq(x,y);
        }
        return x===y;
    }
    var listEq = function(x,y) {
        if(x.length !== y.length) {return false;}
        for (var i = 0; i < x.length; i++) {
            if(x[i] instanceof Array) {
                if(y[i] instanceof Array) {
                    if(!listEq(x[i],y[i])) {return false;}
                } else {
                    return false;
                }
            } else if(x[i] !== y[i]) {
                return false;
            }
        };
        return true;
    }

    /*
    (=<num> 4 5)
    (app (app (tapp = num) 4) 5)
    */
    var bld = new EnvBuilder();
    bld
    .add('+',arrow(numType,arrow(numType,numType)),pair(function(x,y) {return x+y;}))
    .add('-',arrow(numType,arrow(numType,numType)),pair(function(x,y) {return x-y;}))
    .add('*',arrow(numType,arrow(numType,numType)),pair(function(x,y) {return x*y;}))
    .add('/',arrow(numType,arrow(numType,numType)),pair(function(x,y) {return x/y;}))
    .add('%',arrow(numType,arrow(numType,numType)),pair(function(x,y) {return x%y;}))
    .add('=',typeAbs('a', arrow( tIdent('a'), arrow( tIdent('a'), boolType ) )),
    	pair(function(x,y) {return eq(x,y);}))
    .add('<',arrow(numType,arrow(numType,boolType)),pair(function(x,y) {return x<y? '#t':'#f';}))
    .add('>',arrow(numType,arrow(numType,boolType)),pair(function(x,y) {return x>y? '#t':'#f';}))
	.add('cons',typeAbs('elt', arrow(tIdent('elt'),arrow(list(tIdent('elt')),list(tIdent('elt'))))),
		function(x) {return function(y) { return [x].concat(y); }})
	.add('car',typeAbs('elt', arrow(list(tIdent('elt')), tIdent('elt'))), function(x) {
		if(x.length===0) {throw new Error('Cannot extract head of empty list');}
		return x[0];
	})
	.add('cdr',typeAbs('elt',arrow( list(tIdent('elt')), list(tIdent('elt')) )), function(x) {
		if(x.length===0) {throw new Error('Cannot extract tail of empty list');}
		return x.slice(1);
	})
	.add('empty',typeAbs('elt', list(tIdent('elt'))), [])
	;
    return {env:bld.env(),types:bld.types()};
};

var ensure = function(env) {
    return { bindings:{}, outer:env };//bind(env,'£ohoh','#nil');
};

var envTypes = stdlib()
  , _stdlib = envTypes.env
  , _stdtypes = envTypes.types;

module.exports = {
	typeExpr: typeExpr,
	erase: erase,
	eval: eval,
	stdLib: _stdlib,
	stdTypes: _stdtypes
}
/*---------------------------------------------------*/

	}
	)(r,mod,exp,window.node2browser.globals.process);

	window.node2browser.cache[file] = mod.exports
	console.log('defined',file,mod.exports)
	var idx = file.indexOf('/index.js')
	if(idx>0&&file.length==(idx+'/index.js'.length)) {
		window.node2browser.cache[file.substring(0,idx)] = mod.exports
	}
}(window.node2browser.makerequire('/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib')));


(function(r) {
	var file = '/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib/index.js'
	var exp = {}
	var mod = {
		exports: exp
	}
	console.log('defining module',file);
	(function(require,module,exports,process) {

/*---------------------------------------------------*/
var parser = require('./tscheemparser')
  , interpreter = require('./tscheem');

module.exports = {
	parser: parser,
	interpreter: interpreter,
	make: function(src) {
		try {
			var ast = parser.parse(src);
			var type = interpreter.typeExpr(ast,interpreter.stdTypes);
			var erased = interpreter.erase(ast);
			var res = interpreter.eval(erased,interpreter.stdLib);
			return {
				ast: ast,
				type: type,
				res: res
			};
		} catch(e) {
			console.log('Error',e);
			throw e;
		}
	}
}
/*---------------------------------------------------*/

	}
	)(r,mod,exp,window.node2browser.globals.process);

	window.node2browser.cache[file] = mod.exports
	console.log('defined',file,mod.exports)
	var idx = file.indexOf('/index.js')
	if(idx>0&&file.length==(idx+'/index.js'.length)) {
		window.node2browser.cache[file.substring(0,idx)] = mod.exports
	}
}(window.node2browser.makerequire('/Users/frza/Documents/workspace.javascript/nathanuni/nathanuni-pl101/lesson9/lib')));



	
}
)();

