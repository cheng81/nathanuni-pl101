module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "comment": parse_comment,
        "def": parse_def,
        "expr": parse_expr,
        "id": parse_id,
        "integer": parse_integer,
        "pitch": parse_pitch,
        "song": parse_song,
        "space": parse_space,
        "type": parse_type
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "song";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_song() {
        var cacheKey = 'song@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result6 = parse_def();
        while (result6 !== null) {
          result3.push(result6);
          var result6 = parse_def();
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_expr();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(defs, s) { return {definitions:defs,expr:s} })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_def() {
        var cacheKey = 'def@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_id();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result7 = parse_expr();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, e) { return {name:name,expr:e} })(result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr() {
        var cacheKey = 'expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos8 = pos;
        var savedPos9 = pos;
        if (input.substr(pos, 1) === "(") {
          var result52 = "(";
          pos += 1;
        } else {
          var result52 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result52 !== null) {
          var result53 = parse__();
          if (result53 !== null) {
            var result54 = parse_type();
            if (result54 !== null) {
              var result55 = parse__();
              if (result55 !== null) {
                var result56 = parse_expr();
                if (result56 !== null) {
                  var result57 = parse__();
                  if (result57 !== null) {
                    var result58 = parse_expr();
                    if (result58 !== null) {
                      var result59 = parse__();
                      if (result59 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result60 = ")";
                          pos += 1;
                        } else {
                          var result60 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result60 !== null) {
                          var result61 = parse__();
                          if (result61 !== null) {
                            var result50 = [result52, result53, result54, result55, result56, result57, result58, result59, result60, result61];
                          } else {
                            var result50 = null;
                            pos = savedPos9;
                          }
                        } else {
                          var result50 = null;
                          pos = savedPos9;
                        }
                      } else {
                        var result50 = null;
                        pos = savedPos9;
                      }
                    } else {
                      var result50 = null;
                      pos = savedPos9;
                    }
                  } else {
                    var result50 = null;
                    pos = savedPos9;
                  }
                } else {
                  var result50 = null;
                  pos = savedPos9;
                }
              } else {
                var result50 = null;
                pos = savedPos9;
              }
            } else {
              var result50 = null;
              pos = savedPos9;
            }
          } else {
            var result50 = null;
            pos = savedPos9;
          }
        } else {
          var result50 = null;
          pos = savedPos9;
        }
        var result51 = result50 !== null
          ? (function(t, l, r) { return {tag:t,left:l,right:r} })(result50[2], result50[4], result50[6])
          : null;
        if (result51 !== null) {
          var result49 = result51;
        } else {
          var result49 = null;
          pos = savedPos8;
        }
        if (result49 !== null) {
          var result0 = result49;
        } else {
          var savedPos6 = pos;
          var savedPos7 = pos;
          if (input.substr(pos, 1) === "(") {
            var result41 = "(";
            pos += 1;
          } else {
            var result41 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result41 !== null) {
            var result42 = parse__();
            if (result42 !== null) {
              var result43 = parse_pitch();
              if (result43 !== null) {
                var result44 = parse__();
                if (result44 !== null) {
                  var result45 = parse_integer();
                  if (result45 !== null) {
                    var result46 = parse__();
                    if (result46 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result47 = ")";
                        pos += 1;
                      } else {
                        var result47 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result47 !== null) {
                        var result48 = parse__();
                        if (result48 !== null) {
                          var result39 = [result41, result42, result43, result44, result45, result46, result47, result48];
                        } else {
                          var result39 = null;
                          pos = savedPos7;
                        }
                      } else {
                        var result39 = null;
                        pos = savedPos7;
                      }
                    } else {
                      var result39 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result39 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result39 = null;
                  pos = savedPos7;
                }
              } else {
                var result39 = null;
                pos = savedPos7;
              }
            } else {
              var result39 = null;
              pos = savedPos7;
            }
          } else {
            var result39 = null;
            pos = savedPos7;
          }
          var result40 = result39 !== null
            ? (function(p, d) { return {tag:'note', pitch:p, dur:d} })(result39[2], result39[4])
            : null;
          if (result40 !== null) {
            var result38 = result40;
          } else {
            var result38 = null;
            pos = savedPos6;
          }
          if (result38 !== null) {
            var result0 = result38;
          } else {
            var savedPos4 = pos;
            var savedPos5 = pos;
            if (input.substr(pos, 1) === "(") {
              var result30 = "(";
              pos += 1;
            } else {
              var result30 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result30 !== null) {
              var result31 = parse__();
              if (result31 !== null) {
                if (input.substr(pos, 4) === "rest") {
                  var result32 = "rest";
                  pos += 4;
                } else {
                  var result32 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"rest\"");
                  }
                }
                if (result32 !== null) {
                  var result33 = parse__();
                  if (result33 !== null) {
                    var result34 = parse_integer();
                    if (result34 !== null) {
                      var result35 = parse__();
                      if (result35 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result36 = ")";
                          pos += 1;
                        } else {
                          var result36 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result36 !== null) {
                          var result37 = parse__();
                          if (result37 !== null) {
                            var result28 = [result30, result31, result32, result33, result34, result35, result36, result37];
                          } else {
                            var result28 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result28 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result28 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result28 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result28 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result28 = null;
                  pos = savedPos5;
                }
              } else {
                var result28 = null;
                pos = savedPos5;
              }
            } else {
              var result28 = null;
              pos = savedPos5;
            }
            var result29 = result28 !== null
              ? (function(d) { return {tag:'rest', duration:d } })(result28[4])
              : null;
            if (result29 !== null) {
              var result27 = result29;
            } else {
              var result27 = null;
              pos = savedPos4;
            }
            if (result27 !== null) {
              var result0 = result27;
            } else {
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === "(") {
                var result15 = "(";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result15 !== null) {
                var result16 = parse__();
                if (result16 !== null) {
                  if (input.substr(pos, 6) === "repeat") {
                    var result26 = "repeat";
                    pos += 6;
                  } else {
                    var result26 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"repeat\"");
                    }
                  }
                  if (result26 !== null) {
                    var result17 = result26;
                  } else {
                    if (input.substr(pos, 1) === "*") {
                      var result25 = "*";
                      pos += 1;
                    } else {
                      var result25 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result25 !== null) {
                      var result17 = result25;
                    } else {
                      var result17 = null;;
                    };
                  }
                  if (result17 !== null) {
                    var result18 = parse__();
                    if (result18 !== null) {
                      var result19 = parse_integer();
                      if (result19 !== null) {
                        var result20 = parse__();
                        if (result20 !== null) {
                          var result21 = parse_expr();
                          if (result21 !== null) {
                            var result22 = parse__();
                            if (result22 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result23 = ")";
                                pos += 1;
                              } else {
                                var result23 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result23 !== null) {
                                var result24 = parse__();
                                if (result24 !== null) {
                                  var result13 = [result15, result16, result17, result18, result19, result20, result21, result22, result23, result24];
                                } else {
                                  var result13 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result13 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result13 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
              } else {
                var result13 = null;
                pos = savedPos3;
              }
              var result14 = result13 !== null
                ? (function(n, e) { return {tag:'repeat',count:n,section:e }})(result13[4], result13[6])
                : null;
              if (result14 !== null) {
                var result12 = result14;
              } else {
                var result12 = null;
                pos = savedPos2;
              }
              if (result12 !== null) {
                var result0 = result12;
              } else {
                var savedPos0 = pos;
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "(") {
                  var result4 = "(";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result4 !== null) {
                  var result5 = parse__();
                  if (result5 !== null) {
                    if (input.substr(pos, 3) === "ref") {
                      var result6 = "ref";
                      pos += 3;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"ref\"");
                      }
                    }
                    if (result6 !== null) {
                      var result7 = parse__();
                      if (result7 !== null) {
                        var result8 = parse_id();
                        if (result8 !== null) {
                          var result9 = parse__();
                          if (result9 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result10 = ")";
                              pos += 1;
                            } else {
                              var result10 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result10 !== null) {
                              var result11 = parse__();
                              if (result11 !== null) {
                                var result2 = [result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                var result2 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
                var result3 = result2 !== null
                  ? (function(name) { return {tag:'ref',name:name} })(result2[4])
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type() {
        var cacheKey = 'type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "seq") {
          var result10 = "seq";
          pos += 3;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"seq\"");
          }
        }
        if (result10 !== null) {
          var result7 = result10;
        } else {
          if (input.substr(pos, 1) === "&") {
            var result9 = "&";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"&\"");
            }
          }
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;;
          };
        }
        var result8 = result7 !== null
          ? (function() {return 'seq'})()
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 3) === "par") {
            var result5 = "par";
            pos += 3;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"par\"");
            }
          }
          if (result5 !== null) {
            var result2 = result5;
          } else {
            if (input.substr(pos, 1) === "|") {
              var result4 = "|";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;;
            };
          }
          var result3 = result2 !== null
            ? (function() {return 'par'})()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_pitch() {
        var cacheKey = 'pitch@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[A-Ga-g]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Ga-g]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-8]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[0-8]");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, snd) {return fst+snd})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var result6 = parse_space();
        while (result6 !== null) {
          result1.push(result6);
          var result6 = parse_space();
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var result4 = parse_comment();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result2 = " ";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[	\n\r]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[	\\n\\r]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "//") {
          var result10 = "//";
          pos += 2;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result10 !== null) {
          var result11 = [];
          var savedPos4 = pos;
          var savedPos5 = pos;
          var savedReportMatchFailuresVar1 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos).match(/^[\n\r]/) !== null) {
            var result15 = input.charAt(pos);
            pos++;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("[\\n\\r]");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar1;
          if (result15 === null) {
            var result13 = '';
          } else {
            var result13 = null;
            pos = savedPos5;
          }
          if (result13 !== null) {
            if (input.length > pos) {
              var result14 = input.charAt(pos);
              pos++;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result14 !== null) {
              var result12 = [result13, result14];
            } else {
              var result12 = null;
              pos = savedPos4;
            }
          } else {
            var result12 = null;
            pos = savedPos4;
          }
          while (result12 !== null) {
            result11.push(result12);
            var savedPos4 = pos;
            var savedPos5 = pos;
            var savedReportMatchFailuresVar1 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos).match(/^[\n\r]/) !== null) {
              var result15 = input.charAt(pos);
              pos++;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("[\\n\\r]");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar1;
            if (result15 === null) {
              var result13 = '';
            } else {
              var result13 = null;
              pos = savedPos5;
            }
            if (result13 !== null) {
              if (input.length > pos) {
                var result14 = input.charAt(pos);
                pos++;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result14 !== null) {
                var result12 = [result13, result14];
              } else {
                var result12 = null;
                pos = savedPos4;
              }
            } else {
              var result12 = null;
              pos = savedPos4;
            }
          }
          if (result11 !== null) {
            var result9 = [result10, result11];
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 2) === "/*") {
            var result2 = "/*";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"/*\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result8 = "*/";
              pos += 2;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result8 === null) {
              var result6 = '';
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              if (input.length > pos) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result3 = [];
              while (result5 !== null) {
                result3.push(result5);
                var savedPos1 = pos;
                var savedPos2 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                if (input.substr(pos, 2) === "*/") {
                  var result8 = "*/";
                  pos += 2;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"*/\"");
                  }
                }
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result8 === null) {
                  var result6 = '';
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
                if (result6 !== null) {
                  if (input.length > pos) {
                    var result7 = input.charAt(pos);
                    pos++;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result7 !== null) {
                    var result5 = [result6, result7];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              if (input.substr(pos, 2) === "*/") {
                var result4 = "*/";
                pos += 2;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*/\"");
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) { return parseInt(digits.join(""), 10) })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_id() {
        var cacheKey = 'id@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "$") {
          var result3 = "$";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "_") {
            var result10 = "_";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"_\"");
            }
          }
          if (result10 !== null) {
            var result4 = result10;
          } else {
            if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z]");
              }
            }
            if (result9 !== null) {
              var result4 = result9;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos, 1) === "_") {
              var result8 = "_";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"_\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
            while (result6 !== null) {
              result5.push(result6);
              if (input.substr(pos, 1) === "_") {
                var result8 = "_";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"_\"");
                }
              }
              if (result8 !== null) {
                var result6 = result8;
              } else {
                if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-zA-Z0-9]");
                  }
                }
                if (result7 !== null) {
                  var result6 = result7;
                } else {
                  var result6 = null;;
                };
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fstchar, rest) {var id = [fstchar].concat(rest).join(''); return id})(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
